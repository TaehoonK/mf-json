<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>OGC Moving Features Encoding Extension - JSON</title>
<date>2016-10-27</date>
</info>
<preface>
<title></title>
<simpara xml:id="ogcname">Open&#9415; Geospatial Consortium<?asciidoc-br?></simpara>
<simpara xml:id="ogcheading">Publication Date: 2016-mm-dd<?asciidoc-br?>
Approval Date: 2016-mm-dd<?asciidoc-br?>
Submission Date: 2016-mm-dd<?asciidoc-br?>
Reference number of this Document: OGC 16-<indexterm><primary>NNNrN</primary></indexterm>NNNrN<?asciidoc-br?>
Reference URL for this document: <link xl:href="http://www.opengis.net/doc/">http://www.opengis.net/doc/</link><indexterm><primary>DOC-TYPE</primary></indexterm>DOC-TYPE/<indexterm><primary>xxx</primary></indexterm>xxx/<indexterm><primary>m.n</primary></indexterm>m.n<?asciidoc-br?>
Version: 0.2<?asciidoc-br?>
Category: OGC Best Practice<?asciidoc-br?>
Editor: Kyoung-Sook Kim</simpara>
</preface>
<title xml:id="_ogc_moving_features_encoding_extension_json">
<title>OGC Moving Features Encoding Extension - JSON</title>
<simpara>Copyright&#169; 2016 Open Geospatial Consortium.<?asciidoc-br?>
To obtain additional rights of use, visit <link xl:href="http://www.opengeospatial.org/legal/">http://www.opengeospatial.org/legal/</link><?asciidoc-br?></simpara>
<simpara><emphasis role="strong">Warning</emphasis></simpara>
<simpara>This document is not an OGC Standard. This document is distributed for review and comment.
This document is subject to change without notice and may not be referred to as an OGC Standard.</simpara>
<simpara>Recipients of this document are invited to submit, with their comments, notification of any relevant patent rights of which they are aware and to provide supporting documentation.</simpara>
<simpara>Document type:          OGC Best Practice<?asciidoc-br?>
Document subtype:       if applicable<?asciidoc-br?>
Document stage:         Draft<?asciidoc-br?>
Document language:      English<?asciidoc-br?></simpara>
<section xml:id="_license_agreement">
<title>License Agreement</title>
<simpara><phrase role="small">Permission is hereby granted by the Open Geospatial Consortium, ("Licensor"), free of charge and subject to the terms set forth below, to any person obtaining a copy of this Intellectual Property and any associated documentation, to deal in the Intellectual Property without restriction (except as set forth below), including without limitation the rights to implement, use, copy, modify, merge, publish, distribute, and/or sublicense copies of the Intellectual Property, and to permit persons to whom the Intellectual Property is furnished to do so, provided that all copyright notices on the intellectual property are retained intact and that each person to whom the Intellectual Property is furnished agrees to the terms of this Agreement.</phrase></simpara>
<simpara><phrase role="small">If you modify the Intellectual Property, all copies of the modified Intellectual Property must include, in addition to the above copyright notice, a notice that the Intellectual Property includes modifications that have not been approved or adopted by LICENSOR.</phrase></simpara>
<simpara><phrase role="small">THIS LICENSE IS A COPYRIGHT LICENSE ONLY, AND DOES NOT CONVEY ANY RIGHTS UNDER ANY PATENTS THAT MAY BE IN FORCE ANYWHERE IN THE WORLD. THE INTELLECTUAL PROPERTY IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE DO NOT WARRANT THAT THE FUNCTIONS CONTAINED IN THE INTELLECTUAL PROPERTY WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE INTELLECTUAL PROPERTY WILL BE UNINTERRUPTED OR ERROR FREE. ANY USE OF THE INTELLECTUAL PROPERTY SHALL BE MADE ENTIRELY AT THE USER’S OWN RISK. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY CONTRIBUTOR OF INTELLECTUAL PROPERTY RIGHTS TO THE INTELLECTUAL PROPERTY BE LIABLE FOR ANY CLAIM, OR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM ANY ALLEGED INFRINGEMENT OR ANY LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR UNDER ANY OTHER LEGAL THEORY, ARISING OUT OF OR IN CONNECTION WITH THE IMPLEMENTATION, USE, COMMERCIALIZATION OR PERFORMANCE OF THIS INTELLECTUAL PROPERTY.</phrase></simpara>
<simpara><phrase role="small">This license is effective until terminated. You may terminate it at any time by destroying the Intellectual Property together with all copies in any form. The license will also terminate if you fail to comply with any term or condition of this Agreement. Except as provided in the following sentence, no such termination of this license shall require the termination of any third party end-user sublicense to the Intellectual Property which is in force as of the date of notice of such termination. In addition, should the Intellectual Property, or the operation of the Intellectual Property, infringe, or in LICENSOR’s sole opinion be likely to infringe, any patent, copyright, trademark or other right of a third party, you agree that LICENSOR, in its sole discretion, may terminate this license without any compensation or liability to you, your licensees or any other party. You agree upon termination of any kind to destroy or cause to be destroyed the Intellectual Property together with all copies in any form, whether held by you or by any third party.</phrase></simpara>
<simpara><phrase role="small">Except as contained in this notice, the name of LICENSOR or of any other holder of a copyright in all or part of the Intellectual Property shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Intellectual Property without prior written authorization of LICENSOR or such copyright holder. LICENSOR is and shall at all times be the sole entity that may authorize you or any third party to use certification marks, trademarks or other special designations to indicate compliance with any LICENSOR standards or specifications.</phrase></simpara>
<simpara><phrase role="small">This Agreement is governed by the laws of the Commonwealth of Massachusetts. The application to this Agreement of the United Nations Convention on Contracts for the International Sale of Goods is hereby expressly excluded. In the event any provision of this Agreement shall be deemed unenforceable, void or invalid, such provision shall be modified so as to make it valid and enforceable, and as so modified the entire Agreement shall remain in full force and effect. No decision, action or inaction by LICENSOR shall be construed to be a waiver of any rights or remedies available to it.</phrase></simpara>
<simpara><phrase role="small">None of the Intellectual Property or underlying information or technology may be downloaded or otherwise exported or reexported in violation of U.S. export laws and regulations. In addition, you are responsible for complying with any local laws in your jurisdiction which may impact your right to import, export or use the Intellectual Property, and you represent that you have complied with any regulations or registration procedures required by applicable law to make this license enforceable.</phrase></simpara>

</section>
<preface xml:id="_i_abstract">
<title>i. Abstract</title>
<simpara>This document proposes a JavaScript Object Notation (JSON) encoding representation of movement of geographic features as an encoding extension of OGC Moving Features ([OGC 14 083r2] and [OGC 14 084r2]).
A moving feature, typically a vehicle and pedestrian, can be express as a temporal geometry whose location continuously changes over time and contains dynamic non-spatial attributes whose value varies with time.
It is Best Practice to share moving feature data based on JSON and GeoJSON (a JSON format for encoding a variety of geographic data structures). In addition, this document provides an example of RESTful approaches as a Feature Service Interface that has the potential for simplicity, scalability, and resilience to exchange moving feature data across the Web.</simpara>
</preface>
<section xml:id="_ii_keywords">
<title>ii. Keywords</title>
<simpara>The following are keywords to be used by search engines and document catalogues.</simpara>
<simpara>ogcdoc, OGC document, moving features, encoding, JSON, REST</simpara>
</section>
<section xml:id="_iii_preface">
<title>iii. Preface</title>
<simpara>This best practice document basically follows the abstract data model defined in ISO 19141:2008 [ISO 19141:2008]; however, the encoding method refers to the expression of IETF GeoJSON Format [draft-ietf-geojson-04].
The draft format covers the movements of 0-dimensional Point, 1-dimensional curve LineString, and 2-dimensional surface Polygon due to the application requirements (disaster risk management, traffic information services, geo-fencing services, etc.) to represent various spatiotemporal geometries for moving features
considered from OGC Moving Features Encoding: XML Core [OGC 14 083r2] and Simple CSV [OGC 14 084r2] that have focused on the movement of 0-dimensional geometric primitive (Point), called trajectories.</simpara>
<simpara>Attention is drawn to the possibility that some of the elements of this document may be the subject of patent rights.
The Open Geospatial Consortium shall not be held responsible for identifying any or all such patent rights.</simpara>
<simpara><emphasis>Recipients of this document are requested to submit, with their comments, notification of any relevant patent claims or other intellectual property rights of which they may be aware that might be infringed by any implementation of the standard set forth in this document, and to provide supporting documentation.</emphasis></simpara>
</section>
<section xml:id="_iv_submitting_organizations">
<title>iv. Submitting organizations</title>
<simpara>The following organizations have submitted this Document to the Open GeoSpatial Consortium, Inc.:</simpara>
<itemizedlist>
<listitem>
<simpara>Artificial Intelligence Research Center, National Institute of Advanced Industrial Science and Technology</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_v_document_contributor_contact_points">
<title>v. Document Contributor Contact Points</title>
<simpara>All questions regarding this submission should be directed to the editor or the submitters:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="126*"/>
<colspec colname="col_2" colwidth="295*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Organization</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Kyoung-Sook KIM</simpara></entry>
<entry align="left" valign="top"><simpara>Artificial Intelligence Research Center, National Institute of Advanced Industrial Science and Technology</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Hirotaka OGAWA</simpara></entry>
<entry align="left" valign="top"><simpara>Artificial Intelligence Research Center, National Institute of Advanced Industrial Science and Technology</simpara></entry>
</row>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_vi_future_work">
<title>vi. Future Work</title>
<simpara>Among the topics for future development are the following items:</simpara>
<itemizedlist>
<listitem>
<simpara>Implementation of RESTful API</simpara>
</listitem>
<listitem>
<simpara>Moving features in an indoor space</simpara>
</listitem>
<listitem>
<simpara>Representation of three-dimensional moving features</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_scope">
<title>Scope</title>
<simpara>This Best Practice provides a format for encoding moving features using JavaScript Object Notation (JSON) [IETF RFC7159] and an example of interfaces of the RESTful service of moving features.
The format defined this document is an alternative to the OGC&#174; Moving Features Encodings: XML [OGC 14 083r2] and Simple Comma Separated Values (CSV) [OGC 14 084r2] standards.
Even though this document uses different terms from the expression in the OGC Moving Features Encodings ([OGC 14 083r2] and [OGC 14 084r2]),
Moving Feature JSON encoding basically refers to the abstract data model of moving features is defined in ISO 19141:2008 [ISO 19141:2008] as shown in <xref linkend="conceptual_model"/> with the concepts of foliation, prism, trajectory, and leaf.</simpara>
<figure xml:id="conceptual_model" xreflabel="Figure 1">
<title>Conceptual Model of a Moving Feature: Foliation, Prism, Leaf, and Trajectory</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/moving-features.png" contentwidth="60%" align="center"/>
</imageobject>
<textobject><phrase>Conceptual Moving Feature</phrase></textobject>
</mediaobject>
</figure>
<simpara>In this illustration, a 2D rectangle moves and rotates. Each representation of the rectangle at a given time is a leaf.
The path traced by each corner point of the rectangle (and by each of its other points) is a trajectory.
The set of points contained in all of the leaves, and in all of the trajectories, forms a prism.
The set of leaves also forms a foliation, meaning that there is a complete and separate representation of the geometry of the feature for each specific time.
The prism of the moving feature can be viewed as a bundle of trajectories of points on the local engineering representation of the feature&#8217;s geometry.</simpara>
<simpara>In general, Moving Feature JSON encoding applies to representations and formats of IETF GeoJSON [draft-ietf-geojson-04]; however, new terms are added to specify dynamic attributes of moving features:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Temporal geometric objects</emphasis> whose location changes over time: Movements of 0-dimensional, 1-dimensional, 2-dimensional geometric primitives, and their collections.</simpara>
</listitem>
<listitem>
<simpara><emphasis>Dynamic non-spatial attributes</emphasis> whose value varies with time: Changes of a quantity.</simpara>
</listitem>
</itemizedlist>
<simpara>This document also describes based on the data format:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>RESTful APIs</emphasis> for handling moving feature data over HTTP: Create, Read, Update, and Delete (CRUD) operations.</simpara>
</listitem>
</itemizedlist>
<simpara>This version of this Best Practice document has left many issues out of its scope.
Design issues with complex interpolation methods and service capabilities were not considered.</simpara>
</section>
<section xml:id="_conformance">
<title>Conformance</title>
<simpara>Not applicable for this Best Practice document.</simpara>
</section>
<section xml:id="references" xreflabel="3">
<title>References</title>
<simpara>The following normative documents contain provisions that, through reference in this text, constitute provisions of this document. For dated references, subsequent amendments
to, or revisions of, any of these publications do not apply. For undated references, the latest edition of the normative document referred to applies.</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="http://www.opengeospatial.org/standards/common">OGC 06-121r9</link>, <emphasis>OGC Web Services Common Standard</emphasis>, version 2.0.0</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.opengeospatial.org/standards/movingfeatures">OGC 14-083r2</link>, <emphasis>Moving Features Encoding Part I: XML Core</emphasis>. 2015</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.opengeospatial.org/standards/movingfeatures">OGC 14-084r2</link>, <emphasis>Moving Features Encoding Extension: Simple Comma Separated Values (CSV)</emphasis>. 2015</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.opengeospatial.org/standards/sensorthings">OGC 15-078r6</link>, <emphasis>OGC SensorThings API Part 1: Sensing</emphasis>. 2016</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://isotc.iso.org/livelink/livelink?func=ll&amp;objId=4230456&amp;objAction=browse&amp;sort=subtype">ISO/IEC Directives</link>, <emphasis>Part 2. Rules for the structure and drafting of International Standards</emphasis></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.iso.org/iso/catalogue_detail?csnumber=40874">ISO 8601:2004</link>, <emphasis>Data elements and interchange formats - Information interchange - Representation of dates and time</emphasis></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.iso.org/iso/catalogue_detail.htm?csnumber=26012">ISO 19107:2003</link>, <emphasis>Geographic Information - Spatial schema</emphasis></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=59221">ISO 19119:2006</link>, <emphasis>Geographic information - Services</emphasis></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=41445">ISO 19141:2008</link>, <emphasis>Geographic information - Schema for moving features</emphasis></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.ietf.org/rfc/rfc3986.txt">IETF RFC 3986</link>, <emphasis>Uniform Resource Identifier (URI): Generic Syntax</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.ietf.org/rfc/rfc2616.txt">IETF RFC 2616</link>, <emphasis>Hypertext Transfer Protocol&#8201;&#8212;&#8201;HTTP/1.1</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.ietf.org/rfc/rfc7159.txt">IETF RFC 7159</link>, <emphasis>The JavaScript Object Notation (JSON) Data Interchange Format</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.ietf.org/rfc/rfc7464.txt">IETF RFC 7464</link>, <emphasis>JavaScript Object Notation (JSON) Text Sequences</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.rfc-editor.org/info/rfc7946">IETF RFC 7946</link>, <emphasis>The GeoJSON Format</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html">OData-Part1</link>, <emphasis>OData Version 4.0. Part 1: Protocol Plus Errata 03.</emphasis> Edited by Michael Pizzo, Ralf Handl, and Martin Zurmuehl. 02 June 2016. OASIS Standard incorporating Approved Errata 03.</simpara>
</listitem>
</itemizedlist>
<simpara>Additionally the following informative documents are addressed:</simpara>
<itemizedlist>
<listitem>
<simpara>OGC 15-052r1, <emphasis>OGC Testbed 11 REST Interface Engineering Report</emphasis></simpara>
</listitem>
<listitem>
<simpara>OGC 16-120r1, <emphasis>OGC Moving Features Access</emphasis></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_terms_and_definitions">
<title>Terms and definitions</title>
<simpara>This document uses the specification terms defined in Subclause 5.3 of [OGC 06-121r9], which is based on the ISO/IEC Directives, Part 2, Rules for the structure and drafting of International Standards.
In particular:
- SHALL is the verb form used to indicate a requirement to be strictly followed to conform to this specification, from which no deviation is permitted
- MAY is the verb form used to indicate an action permissible within the limits of this specification</simpara>
<simpara>For the purposes of this document, the following additional terms and definitions apply.</simpara>
<section xml:id="_api">
<title>API</title>
<simpara>An interface that is defined in terms of a set of functions and procedures, and enables a program to gain access to facilities within an application. (Definition from Dictionary of Computer Science - Oxford Quick Reference, 2016)</simpara>
</section>
<section xml:id="_client">
<title>client</title>
<simpara>software component that can invoke an operation from a server<?asciidoc-br?>
 [ OGC 06-121r9 ]</simpara>
</section>
<section xml:id="_dynamic_attributes">
<title>dynamic attributes</title>
<simpara>characteristic of a feature in which its value varies with time</simpara>
</section>
<section xml:id="_feature">
<title>feature</title>
<simpara>abstraction of real world phenomena<?asciidoc-br?>
 [ ISO 19101:2002 ]</simpara>
</section>
<section xml:id="_foliation">
<title>foliation</title>
<simpara>one parameter set of geometries such that each point in the prism of the set is in one and only one
trajectory and in one and only one leaf<?asciidoc-br?>
 [ ISO 19141:2008 ]</simpara>
</section>
<section xml:id="_geometric_object">
<title>geometric object</title>
<simpara>spatial object representing a geometric set<?asciidoc-br?>
 [ ISO 19107:2003 ]</simpara>
</section>
<section xml:id="_geometric_primitive">
<title>geometric primitive</title>
<simpara>geometric object representing a single, connected, homogeneous element of space<?asciidoc-br?>
 [ ISO 19107:2003 ]</simpara>
</section>
<section xml:id="_interface">
<title>interface</title>
<simpara>named set of operations that characterize the behaviour of an entity<?asciidoc-br?>
 [ ISO 19119:2006 ]</simpara>
</section>
<section xml:id="_leaf">
<title>leaf</title>
<simpara>&lt;one parameter set of geometries&gt; geometry at a particular value of the parameter<?asciidoc-br?>
 [ ISO 19141:2008 ]</simpara>
</section>
<section xml:id="_moving_feature">
<title>moving feature</title>
<simpara>feature whose location changes over time<?asciidoc-br?>
 [ ISO 19141:2008 ]<?asciidoc-br?>
NOTE &#160;&#160; Its base representation uses a local origin and local coordinate vectors, of a geometric object at a given reference time.</simpara>
</section>
<section xml:id="_one_parameter_set_of_geometries">
<title>one parameter set of geometries</title>
<simpara>function f from an interval t <inlineequation><alt><![CDATA[\in ]]></alt><mathphrase><![CDATA[\in ]]></mathphrase></inlineequation> [a, b] such that f(t) is a geometry and for each point P <inlineequation><alt><![CDATA[\in ]]></alt><mathphrase><![CDATA[\in ]]></mathphrase></inlineequation> f(a) there is a one
parameter set of points (called the trajectory of P) P(t):[a,b] &#8594; P(t) such that P(t) <inlineequation><alt><![CDATA[\in ]]></alt><mathphrase><![CDATA[\in ]]></mathphrase></inlineequation> f(t)<?asciidoc-br?>
 [ ISO 19141:2008 ]<?asciidoc-br?>
EXAMPLE &#160;&#160; A curve C with constructive parameter t is a one parameter set of points c(t).</simpara>
</section>
<section xml:id="_period">
<title>period</title>
<simpara>one-dimensional geometric primitive representing extent in time<?asciidoc-br?>
 [ ISO 19141:2008 ]</simpara>
</section>
<section xml:id="_prism">
<title>prism</title>
<simpara>&lt;one parameter set of geometries&gt; set of points in the union of the geometries (or the union of the
trajectories) of a one parameter set of geometries</simpara>
</section>
<section xml:id="_request">
<title>request</title>
<simpara>invocation of an operation by a client<?asciidoc-br?>
 [ OGC 06-121r9 ]</simpara>
</section>
<section xml:id="_resource">
<title>resource</title>
<simpara>any addressable unit of information or service<?asciidoc-br?>
 [ IETF RFC 2396 ]</simpara>
</section>
<section xml:id="_response">
<title>response</title>
<simpara>result of an operation, returned from a server to a client<?asciidoc-br?>
 [ OGC 06-121r9 ]</simpara>
</section>
<section xml:id="_server">
<title>server</title>
<simpara>a particular instance of a service<?asciidoc-br?>
 [ OGC 06-121r9 ]</simpara>
</section>
<section xml:id="_service">
<title>service</title>
<simpara>distinct part of the functionality that is provided by an entity through interfaces<?asciidoc-br?>
 [ ISO 19119:2006 ]</simpara>
</section>
<section xml:id="_temporal_geometry">
<title>temporal geometry</title>
<simpara>one parameter set of geometries in which the parameter is time</simpara>
</section>
<section xml:id="_trajectory">
<title>trajectory</title>
<simpara>path of a moving point described by a one parameter set of points<?asciidoc-br?>
 [ ISO 19141:2008 ]</simpara>
</section>
</section>
<section xml:id="_conventions">
<title>Conventions</title>
<simpara>This sections provides details and examples for conventions used in the document. All examples illustrated by gray or orange boxes are informative only.</simpara>
<section xml:id="_json_notation">
<title>JSON notation</title>
<simpara>The notation of JSON in this document is based on the specification of [RFC 7159].</simpara>
<simpara>The ordering of the members of any JSON object MUST be considered irrelevant. Some examples use a JavaScript single line comment (//) and an ellipsis (&#8230;&#8203;) as placeholder notation for a specific JSON instance.
Whitespace is used in the examples inside this document to help illustrate the data structures, but is not required. Unquoted whitespace is not significant in JSON.</simpara>
</section>
<section xml:id="_uml_notation">
<title>UML notation</title>
<simpara>Unified Modeling Language (UML) static structure diagrams appearing in this document are used as described in Subclause 5.2 of OGC Web Services Common [OGC 06-121r9].</simpara>
</section>
<section xml:id="_abbreviated_terms">
<title>Abbreviated terms</title>
<simpara>The following symbols and abbreviated terms are used in this best practice paper:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="84*"/>
<colspec colname="col_2" colwidth="337*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>API</simpara></entry>
<entry align="left" valign="top"><simpara>Application Program Interface</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CRS</simpara></entry>
<entry align="left" valign="top"><simpara>Coordinate Reference Systems</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CRUD</simpara></entry>
<entry align="left" valign="top"><simpara>Create, Read, Update, Delete</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>CSV</simpara></entry>
<entry align="left" valign="top"><simpara>Comma Separated Values</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>HTTP</simpara></entry>
<entry align="left" valign="top"><simpara>Hypertext Transfer Protocol</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>IETF</simpara></entry>
<entry align="left" valign="top"><simpara>Internet Engineering Task Force</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ISO</simpara></entry>
<entry align="left" valign="top"><simpara>International Organization for Standardization</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>JSON</simpara></entry>
<entry align="left" valign="top"><simpara>JavaScript Object Notation</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OASIS</simpara></entry>
<entry align="left" valign="top"><simpara>Organization for the Advancement of Structured Information Standards</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>OGC</simpara></entry>
<entry align="left" valign="top"><simpara>Open Geospatial Consortium</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>REST</simpara></entry>
<entry align="left" valign="top"><simpara>Representational State Transfer</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>UML</simpara></entry>
<entry align="left" valign="top"><simpara>Unified Modeling Language</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>URI</simpara></entry>
<entry align="left" valign="top"><simpara>Uniform Resource Identifiers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>URL</simpara></entry>
<entry align="left" valign="top"><simpara>Uniform Resource Locators</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>WKT</simpara></entry>
<entry align="left" valign="top"><simpara>Well Known Text</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>XML</simpara></entry>
<entry align="left" valign="top"><simpara>Extensible Markup Language</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1D</simpara></entry>
<entry align="left" valign="top"><simpara>One Dimensional</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2D</simpara></entry>
<entry align="left" valign="top"><simpara>Two Dimensional</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="data_format" xreflabel="6">
<title>JSON Encoding</title>
<simpara>This Clause specifies the data format for encoding moving features by using the JSON objects.</simpara>
<section xml:id="_overview">
<title>Overview</title>
<simpara>Moving Features JSON (MF-JSON) is designed by extending "foreign members" of GeoJSON [draft-ietf-geojson-04].
MF-JSON defines several types of JSON objects to represent movements about moving features, their dynamic properties, and their spatiotemporal extents based on the coordinate reference system of World Geodetic System 1984 (WGS84) and Coordinated Universal Time (UTC).</simpara>
<simpara><xref linkend="mf_overview"/> compares the difference of members between GeoJSON and MF-JSON.</simpara>
<figure xml:id="mf_overview" xreflabel="Figure 2">
<title>JSON Objects in the Moving Features JSON format</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mf-overview.png" contentwidth="60%" align="center"/>
</imageobject>
<textobject><phrase>Overview</phrase></textobject>
</mediaobject>
</figure>
<formalpara>
<title>Example:</title>
<para>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingFeature",  //(REQUIRED) Moving Feature Type
    "temporalGeometry": { //(REQUIRED) temporal geometric object, extended from 'geometry'
        "type": "MovingPoint", // a geometry type to represent a trajectory
        "coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
        "datetimes": ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z", "2011-07-15T01:01:01Z"],
        "interpolations": "Linear" // an pre-defined interpolation method
    },
    "temporalProperties": [  //(OPTIONAL) dynamic non-spatial attributes, extended from 'properties'
        {       "name":"length",
                "uom": "http://www.qudt.org/qudt/owl/1.0.0/quantity/Length", // a URI denoting a unit-of-measure
                "values": [1.0, 2.4, 1.0],
                "datetimes" : ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z"],
                "interpolations": "Stepwise"
        },
        {       "name":"discharge",
                "uom":"m^3/s", // a symbol from UCUM
                "values": [3.0, 2.4, 4.0],
                "datetimes" : ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z"],
                "interpolations": [
                    {
                        "coefficients": [1.0, 3.0, 4.1], // v = at^2 + bt + c
                        "period": {
                    	    "begin": "2011-07-14T22:01:01Z",
                    	    "end" : "2011-07-14T23:01:01Z"
                        }
                    },
                    {
                        "coefficients": [5.0, 8.0], // v = at + b
                        "period": {
                    	    "begin": "2011-07-14T23:01:01Z",
                    	    "end" : "2011-07-15T00:01:01Z"
                        }
                    }
                ]
        }
    ],
    "stBoundedBy": {  //(OPTIONAL) spatiotemporal bounding box to include the moving feature
        "bbox": [100.0, 0.0, 101.0, 1.0],
        "period": {
            "begin": "2011-07-14T22:01:00Z",
            "end" : "2011-07-15T21:14:00Z"
        }
    },
    "properties": {  //(OPTIONAL) static non-spatial attributes regardless of time: the same representation of GeoJSON
            "name": "bus1",
            "state":"test1"
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_types">
<title>Types</title>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": ...
}</programlisting>
<simpara>In <link xl:href="https://datatracker.ietf.org/doc/draft-ietf-geojson/">IETF GeoJSON format</link>, types are not extensible.
GeoJSON allows only the fixed types: FeatureCollection, Feature, Point, LineString, MultiPoint, Polygon, MultiLineString, MultiPolygon, and GeometryCollection.
Even though the type extension occurs contravention of GeoJSON, this document extends new types for representing moving features with time-varying geometries and properties.</simpara>
<section xml:id="_moving_feature_types">
<title>Moving Feature Types</title>
<simpara>In this format, two moving feature types are added as follows:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MovingFeature</emphasis>: a moving feature instance</simpara>
</listitem>
</itemizedlist>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingFeature",
    "temporalGeometry": ...,
    "temporalProperties": ...,
    "stBoundedBy": ...,
    "properties": ...
}</programlisting>
<simpara>A moving feature instance shall contain a <literal>"temporalGeometry"</literal> field as described in the Temporal Geometries section.
A moving feature may contain a <literal>"temporalProperties"</literal>, <literal>"stBoundedBy"</literal>, <literal>"properties"</literal> fields depending on the application requirements.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MovingFeatureCollection</emphasis>: a collection of moving feature instances</simpara>
</listitem>
</itemizedlist>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingFeatureCollection",
    "features": [
        {
            "type": "MovingFeature",
            "temporalGeometry": ...,
            "temporalProperties": ...,
            ...
        },
        {
            "type": "MovingFeature",
            "temporalGeometry": ...,
            "temporalProperties": ...,
            ...
        }
    ],
    "stBoundedBy": ...
}</programlisting>
<simpara>A collection of moving features shall contain a <literal>"features"</literal> field as an array object of moving features.
A collection of moving features may contain a <literal>"stBoundedBy"</literal> field for the spatiotemporal bounding box to cover all of features.</simpara>
</section>
<section xml:id="_temporal_geometry_types">
<title>Temporal Geometry Types</title>
<simpara>The movement of a moving feature is represented as a JSON object where the type members value shall be one of the following strings: "<emphasis>MovingPoint</emphasis>", "<emphasis>MovingLineString</emphasis>", "<emphasis>MovingPolygon</emphasis>", "<emphasis>MultiMovingPoint</emphasis>", "<emphasis>MultiMovingLineString</emphasis>", "<emphasis>MultiMovingPolygon</emphasis>", or "<emphasis>MovingGeometryCollection</emphasis>".
It is modeled as function <emphasis><phrase role="red">temporalGeometry: timePosition &#8594; Geometry</phrase></emphasis> (<link xl:href="http://geojson.org/geojson-spec.html#point">Point</link>, <link xl:href="http://geojson.org/geojson-spec.html#linestring">LineString</link>, <link xl:href="http://geojson.org/geojson-spec.html#polygon">Polygon</link>,
<link xl:href="http://geojson.org/geojson-spec.html#multipoint">MultiPoint</link>, <link xl:href="http://geojson.org/geojson-spec.html#multilinestring">MultiLineString</link>, <link xl:href="http://geojson.org/geojson-spec.html#multipolygon#polygon">MultiPolygon</link>, or <link xl:href="http://geojson.org/geojson-spec.html#geometry-collection">GeometryCollection</link>).</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MovingPoint</emphasis>: A temporal geometry represents a trajectory of a time-parametered 0-dimensional geometric primitive (Point), representing a single geographic position at a time position (instant) within its temporal domain. Intuitively this type depicts a set of curves in a spatiotemporal domain. It is used to express <link xl:href="http://docs.opengeospatial.org/is/14-083r2/14-083r2.html#78">mf:AbstractTrajectory</link> in the OGC&#174; Moving Features standard. For example, the movement information of people, vehicles, or hurricanes can be shared by instances of the MovingPoint type.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MovingLineString</emphasis>: A temporal geometry represents the prism of a time-parametered 1-dimensional (1D) geometric primitive (LineString), whose leaf at a time position is 1-dimensional linear object in a particular time period. Intuitively this type depicts a set of surfaces in a spatiotemporal domain. For example, the movement information of weather fronts or traffic congestion on roads can be shared by instances of the MovingLineString type.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MovingPolygon</emphasis>: A temporal geometry represents the prism of a time-parametered 2-dimensional (2D) geometric primitive (Polygon), whose leaf at a time position is 2-dimensional polygonal object in a particular time period. Intuitively this type depicts a set of polyhedrons that are the convex hulls of two congruent polygons in a spatiotemporal domain. For example, the changes of flooding areas or the movement information of air pollution can be shared by instances of the MovingPolygon type.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MultiMovingPoint</emphasis>: A temporal geometry represents a set of moving points.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MultiMovingLineString</emphasis>: A temporal geometry represents a set of moving linestrings.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MultiMovingPolygon</emphasis>: A temporal geometry represents a set of moving polygons.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MovingGeometryCollection</emphasis>: It represents a collection of temporal geometries that have time-varying locations. Each object in this array belongs to one of the above types.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_temporal_geometries">
<title>Temporal Geometries</title>
<simpara>A moving feature has only one temporal geometry whose type is one of "MovingPoint", "MovingLineString", "MovingPolygon", "MultiMovingPoint", "MultiMovingLineString",  "MultiMovingPolygon", and "MovingGeometryCollection".
The temporal geometry is conceptualized as a prism of the set of points contained in all of the leaves (a foliation) and trajectories.
In this draft, a temporal geometry is represented by a sequence of pairs <inlineequation><alt><![CDATA[(g, t)]]></alt><mathphrase><![CDATA[(g, t)]]></mathphrase></inlineequation>, where <inlineequation><alt><![CDATA[g]]></alt><mathphrase><![CDATA[g]]></mathphrase></inlineequation> is a leaf geometry and <inlineequation><alt><![CDATA[t]]></alt><mathphrase><![CDATA[t]]></mathphrase></inlineequation> is a sampling time position, with an interpolation method. The leaves of simple geometries is described by the same number of elements in the lists of <literal>"coordinates"</literal> and <literal>"datetimes"</literal> which ordered sets that preserves the given order. The interpolation approximates geographic positions at non sampling time instants for constructing the trajectory or prism of the moving feature in a spatiotemporal domain. A collection of temporal geometries consists of several prisms of geometry primitives in the <literal>"members"</literal> field.</simpara>
<section xml:id="_simple">
<title>Simple</title>
<programlisting language="json" linenumbering="unnumbered">{
    ...,
    "temporalGeometry": {
      "type": "MovingPoint | MovingLineString | MovingPolygon",  // vbar | as a means to select ONE type.
      "coordinates": [...],
      "datetimes" : [...],
      "interpolations": ...
    },
    ...
}</programlisting>
<itemizedlist>
<listitem>
<simpara><literal>"coordinates"</literal>: The object SHALL be an array of geographic positions to construct a leaf geometry at a time position.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="47*"/>
<colspec colname="col_2" colwidth="281*"/>
<colspec colname="col_3" colwidth="94*"/>
<thead>
<row>
<entry align="left" valign="top">Types</entry>
<entry align="center" valign="top">Formats</entry>
<entry align="left" valign="top"><emphasis>Comments</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>MovingPoint</simpara></entry>
<entry align="center" valign="top"><simpara>[ [x1, y1], [x2, y2], &#8230;&#8203; ]</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>a list of points at each leaf, increasing time order</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>MovingLineString</simpara></entry>
<entry align="center" valign="top"><simpara>[ [[x11, y11], [x12, y12], &#8230;&#8203;], [[x21, y21], [x22, y22], &#8230;&#8203;], &#8230;&#8203; ]</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>a list of linestrings at each leaf, increasing time order</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>MovingPolygon</simpara></entry>
<entry align="center" valign="top"><simpara>[ [[[ox11, oy11], [ox12, oy12], &#8230;&#8203;], [[ix11, iy11],[ix12, iy12], &#8230;&#8203;],&#8230;&#8203;], [[[ox21, oy21], [ox22, oy22], &#8230;&#8203;], [[ix21, iy21],[ix22, iy22], &#8230;&#8203;], &#8230;&#8203;], &#8230;&#8203; ]</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>a list of polygons at each leaf, increasing time order</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem>
<simpara><literal>"datetimes"</literal>: The object SHALL be an array of instants of time encoded as a character string of [ISO 8601](<link xl:href="http://www.iso.org/iso/home/standards/iso8601.htm">http://www.iso.org/iso/home/standards/iso8601.htm</link>) date-time formatter.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="47*"/>
<colspec colname="col_2" colwidth="234*"/>
<colspec colname="col_3" colwidth="140*"/>
<thead>
<row>
<entry align="left" valign="top">Types</entry>
<entry align="center" valign="top">Formats</entry>
<entry align="left" valign="top"><emphasis>Comments</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><link xl:href="http://www.w3.org/TR/xmlschema11-2/#dateTime">DateTime</link></simpara></entry>
<entry align="center" valign="top"><simpara>["yyyy-MM-dd&#8217;T&#8217;HH:mm:ss&#8217;Z'", "yyyy-MM-dd&#8217;T&#8217;HH:mm:ss&#8217;Z'", &#8230;&#8203;]</simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>a list of monotonic increasing instants</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</listitem>
<listitem>
<simpara><literal>"interpolations"</literal>: The object SHALL be a character string of pre-defined interpolation methods or an array object of interpolation formulas in time. <link xl:href="http://mathworld.wolfram.com/Interpolation.html">Interpolation</link> is a method of finding new values for any function using the given set of values. The unknown position at a particular point can be found using many interpolation methods.
Here, there are two expressions for an interpolation instance as follows:</simpara>
<literallayout class="monospaced">  --- Predefined Interpolation Methods
  --- Interpolation Formulas</literallayout>
<formalpara>
<title>[Predefined Interpolation Methods]</title>
<para>The new position is differently derived by each method. For the predefine method, there is the restriction to have the same number of positions of each leaf geometry.</para>
</formalpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="47*"/>
<colspec colname="col_2" colwidth="187*"/>
<colspec colname="col_3" colwidth="187*"/>
<thead>
<row>
<entry align="left" valign="top">Types</entry>
<entry align="center" valign="top">Descriptions</entry>
<entry align="left" valign="top"><emphasis>Comments</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Discrete</simpara></entry>
<entry align="center" valign="top"><simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/discrete.png" contentwidth="60%"/>
</imageobject>
<textobject><phrase>Discrete</phrase></textobject>
</inlinemediaobject></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>There is no interpolation position between two successive positions.</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Stepwise</simpara></entry>
<entry align="center" valign="top"><simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/stepwise.png" contentwidth="60%"/>
</imageobject>
<textobject><phrase>Stepwise</phrase></textobject>
</inlinemediaobject></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>The interpolation position between two successive positions equals to the first position.</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Linear</simpara></entry>
<entry align="center" valign="top"><simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="./images/linear.png" contentwidth="60%"/>
</imageobject>
<textobject><phrase>Linear</phrase></textobject>
</inlinemediaobject></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>The new position is found from the linear interpolation formula with the two successive positions. Default</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingPoint",
    "coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0]],
    "datetimes": ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z"],
    "interpolations": "Linear" // an interpolation method
}</programlisting>
<formalpara>
<title>[Interpolation Formulas]</title>
<para>A temporal geometry may have a several interpolation formulas within its temporal domain. An element of interpolation formulas is represented by field <literal>"coefficients"</literal> and <literal>"period"</literal>. The new position at a given time position is derived from a <literal>"coefficients"</literal> instance as a multidimensional array of <emphasis role="strong">polynomial interpolation formulas</emphasis> of <inlineequation><alt><![CDATA[(x, y, z)]]></alt><mathphrase><![CDATA[(x, y, z)]]></mathphrase></inlineequation> coordinates during a particular time period. If the time position does not belong to any time period of the elements of formula, there is no interpolation position at that time. The order of each formula array SHALL follow <inlineequation><alt><![CDATA[x]]></alt><mathphrase><![CDATA[x]]></mathphrase></inlineequation> (longitude), <inlineequation><alt><![CDATA[y]]></alt><mathphrase><![CDATA[y]]></mathphrase></inlineequation> (latitude), <inlineequation><alt><![CDATA[z]]></alt><mathphrase><![CDATA[z]]></mathphrase></inlineequation> (altitude) order. The number of elements in each formula during a particular time period is the same. The time periods between any two elements of formulas only allows empty or 0-dimensional intersection.</para>
</formalpara>
<informalequation>
<alt><![CDATA[\[x(t) = a_{n-1}t^{n-1} + a_{n-2}t^{n-2} + ... + a_0t^0\]
\[y(t) = b_{n-1}t^{n-1} + b_{n-2}t^{n-2} + ... + b_0t^0\]
\[z(t) = c_{n-1}t^{n-1} + c_{n-2}t^{n-2} + ... + c_0t^0\]]]></alt>
<mathphrase><![CDATA[\[x(t) = a_{n-1}t^{n-1} + a_{n-2}t^{n-2} + ... + a_0t^0\]
\[y(t) = b_{n-1}t^{n-1} + b_{n-2}t^{n-2} + ... + b_0t^0\]
\[z(t) = c_{n-1}t^{n-1} + c_{n-2}t^{n-2} + ... + c_0t^0\]]]></mathphrase>
</informalequation>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingPoint",
    "coordinates": ...,
    "datetimes": ...,
    "interpolations": [
     {
         "coefficients": [[1.0, 3.0, 4.1], [2.0, 2.1, 3.0]],
         // x = 1.0*t^2 + 3.0*t + 4.1 , y = 2.0*t^2 + 2.1*t + 3.0
         "period": {
             "begin": "2011-07-14T22:01:01Z",
             "end" : "2011-07-14T23:01:01Z"
         }
     },
     {
         "coefficients": [[4.0, 2.0], [1.0, 2.0]],
         // x = 4.0*t + 2.0 , y = 1.0*t + 2.0
         "period": {
             "begin": "2011-07-14T23:01:01Z",
             "end" : "2011-07-15T00:01:01Z"
         }
     }
   ]
}</programlisting>
<programlisting language="javascript" linenumbering="unnumbered">{
    "type": "MovingLineString",
    "coordinates": ...,
    "datetimes": ...,
    "interpolations": [
     {
         "coefficients": [[[1.0, 3.0, 4.1], [2.0, 2.1, 3.0]], [[2.0, 1.0, 1.2], [1.0, 0.1, 2.0]]],
         // x1 = 1.0*t^2 + 3.0*t + 4.1 , y1 = 2.0*t^2 + 2.1*t + 3.0
         // x2 = 2.0*t^2 + 1.0*t + 1.2 , y2 = 1.0*t^2 + 0.1*t + 2.0
         "period": {
             "begin": "2011-07-14T22:01:01Z",
             "end" : "2011-07-14T23:01:01Z"
         }
     },
     {
         "coefficients": [[[4.0, 2.0], [1.0, 2.0]], [[2.0, 3.0], [2.0, 1.0]]],
         // x1 = 4.0*t + 2.0 , y1 = 1.0*t + 2.0
         // x2 = 2.0*t + 3.0 , y2 = 2.0*t + 1.0
         "period": {
             "begin": "2011-07-14T23:01:01Z",
             "end" : "2011-07-15T00:01:01Z"
          }
     }
   ]
}</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="_collection">
<title>Collection</title>
<simpara>A temporal geometry is represented as an array object of a set of simple temporal geometry instances.</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    ...
    "temporalGeometry": {
      "type": "MultiMovingPoint | MultiMovingLineString | MultiMovingPolygon | MovingGeometryCollection",
      "members": [
         {
            // Simple temporal geometry instance
            "type": "MovingPoint | MovingLineString | MovingPolygon",
            "coordinates": [...],  // COORDINATES expression
            "datetimes" : [...],   // DATETIMES expression
            "interpolations": ...   // INTERPOLATIONS expression
         }
      ]
    },
    ...
}</programlisting>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MultiMovingPoint</emphasis>: The <literal>"members"</literal> element SHALL be an array of instances of type <literal>"MovingPoint"</literal>. The leaf geometry at a time position must be an instance of type "MultiPoint", which is the union of each leaf of moving point members at the same time.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MultiMovingLineString</emphasis>: The <literal>"members"</literal> element SHALL be an array of instances of type <literal>"MovingLineString"</literal>. The leaf geometry at a time position must be an instance of type "MultiLineString", which is the union of each leaf of moving linestring members at the same time.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MultiMovingPolygon</emphasis>: The <literal>"members"</literal> element SHALL be an array of instances of type <literal>"MovingPolygon"</literal>. The leaf geometry at a time position must be an instance of type "MultiPolygon", which is the union of each leaf of moving polygon members at the same time.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">MovingGeometryCollection</emphasis>: Each element of <literal>"members"</literal> can be an instance of different moving types. The leaf geometry at a time position must be an instance of type <literal>"GeometryCollection"</literal>, which is the union of each leaf of any temporal geometries at the same time.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_temporal_properties">
<title>Temporal Properties</title>
<programlisting language="json" linenumbering="unnumbered">{
    ...
    "temporalProperties": [
      {
        "name": "any string",
        "uom": ...,
        "values": [...],
        "datetimes" : [...],  // same expression of temporal geometry
        "interpolations": ...
      }
    ],
    ...
}</programlisting>
<simpara>A moving feature can have more than zero time-varying properties, such as the velocity of vehicles or wind speed of hurricanes. The name of property is always a string.</simpara>
<note>
<simpara>If a property has a static value, it is represented with the member "properties" as same as GeoJSON.</simpara>
</note>
<itemizedlist>
<listitem>
<simpara><literal>"uom"</literal>: The unit of a temporal property is represented as a URI denoting a unit-of-measure defined in a web resource or a string of symbol from the Unified Code for Units of Measure (UCUM)<xref linkend="2"/>.</simpara>
</listitem>
<listitem>
<simpara><literal>"values"</literal>: Each member of values is a string, number, or one of the literals: true and false. The temporal property also needs to define an interpolation method like the temporal geometry.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Even though the value of temporal property is depending on the spatiotemporal location, this draft only considers the temporal dependencies of their changes of value.</simpara>
</note>
<itemizedlist>
<listitem>
<simpara><literal>"interpolations"</literal>: The object SHALL be a character string of pre-defined interpolation methods: Discrete, Stepwise, and Linear (default) or an array of interpolation formulas used for polynomial interpolation in time.</simpara>
</listitem>
</itemizedlist>
<programlisting language="json" linenumbering="unnumbered">{
 ...,
 "interpolations": [
   {
     "coefficients": [1.0, 3.0, 4.1], // v = at^2 + bt + c
     "period": {
          "begin": "2011-07-14T22:01:01Z",
          "end" : "2011-07-14T23:01:01Z"
      }
   },
   {
     "coefficients": [5.0, 8.0], // v = at + b
     "period": {
          "begin": "2011-07-14T23:01:01Z",
          "end" : "2011-07-15T00:01:01Z"
     }
   }
 ]
}</programlisting>
</section>
<section xml:id="_spatiotemporal_bounding_box">
<title>Spatiotemporal Bounding Box</title>
<simpara>A moving feature may have a member named <literal>"stBoundedBy"</literal>, which indicate the boundary containing moving features in a spatiotemporal domain. To represent information on the coordinate range for moving features, the draft format follows GeoJSON&#8217;s <literal>"bbox"</literal> field. The value of the bbox member must be a 2*m array where n is the number of dimensions.
The temporal boundary is a temporal period of <literal>"begin"</literal> and <literal>"end"</literal> expressed in ISO 8601:2004.</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    ...,
    "stBoundedBy": {
        "bbox": [-10.0, -10.0, 10.0, 10.0],
        "period": {
          "begin": "1994-11-05T13:15:30Z",
          "end" : "1994-11-05T13:15:30Z"
        }
    },
    ...
}</programlisting>
</section>
<section xml:id="_application_domain_variables_foreign_members">
<title>Application Domain Variables (Foreign Members)</title>
<simpara>MF-JSON uses annotations to represent foreign members which are not described in this document and their semantics are dependent on a domain or application specific requirement.
It is the reason why MF-JSON defines their elements by extending the foreign member of GeoJSON.
On the name/value pair of a foreign member, the name always starts with the at sign (@), such as <literal>"@id"</literal>, <literal>"@context"</literal>, and so on.</simpara>
</section>
<section xml:id="_discussions">
<title>Discussions</title>
<note>
<title>Coordinate Reference System</title>
<simpara><link xl:href="https://datatracker.ietf.org/doc/draft-ietf-geojson">The IETF GeoJSON format</link> recommends a single coordinate reference system based on WGS84<xref linkend="2"/>.
In this version of MF-JSON, CRSs are fixed to WGS84 for space and ISO 8601 for time; still they need to be indicated in the request of application demands.
If the application requires to define an alternative CRS, the CRS of a GeoJSON object can be represented with its "crs" field as described in GeoJSON(2008)<xref linkend="3"/>.</simpara>
</note>
<note>
<title>Geometry Object</title>
<simpara>A moving feature may have a member named <literal>"geometry"</literal>, which may represent its projection in coordinate space as points, curves, or surfaces. The representation of Geometry objects is same as GeoJSON.</simpara>
</note>
</section>
</section>
<section xml:id="rest_api" xreflabel="7">
<title>RESTful API (Informative)</title>
<simpara>This Clause provides a design example of the RESTful API as a form of service interfaces to handle moving features on the Web with ease of development, access, robustness, and scalability in server/client distributed environments.
In general, Representational State Transfer (REST) focuses on resources and how to access to these resources over Hypertext Transfer Protocol (HTTP).
A few use cases of RESTful approaches for OGC web service interfaces are analyzed in the OGC Testbed 11 REST Interface Engineering Report [OGC 15-052r1].
Since OGC still consider a common guidance to define RESTful interfaces and JSON encodings, this work refers to the OGC SensorThings API [OGC 15-078r6], which provides a good example to follow the RESTful principle and is approved as official OGC standard.
However, this document contains a minimal description to implement RESTful API using the Moving Features JSON (MF-JSON) encoding.</simpara>
<section xml:id="_general_information">
<title>General Information</title>
<simpara>Clients and servers exchange representations of resources via HTTP messages as shown in <xref linkend="protocol"/>.
Clients send a request against the resources to the server in the form of a request method, Uniform Resource Identifier (URI), protocol version, and request content (header and body).
The server replies with a response message consisting of the protocol version followed by a status code and content.</simpara>
<figure xml:id="protocol" xreflabel="Figure 3">
<title>Client/Server Communication based on RESTful API</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/protocol.png" contentwidth="70%" align="center"/>
</imageobject>
<textobject><phrase>Protocol</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_verb">
<title>Verb</title>
<simpara>Verb is an HTTP method: POST, GET, PUT/PATCH, and DELTE corresponding to create, read, update, and delete (CRUD) operations, respectively. A client make a request with one of the following method to be applied to the resource.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="84*"/>
<colspec colname="col_2" colwidth="337*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>POST</simpara></entry>
<entry align="left" valign="top"><simpara>Creates a new resource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>GET</simpara></entry>
<entry align="left" valign="top"><simpara>Retrieves a resource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PUT</simpara></entry>
<entry align="left" valign="top"><simpara>Updates/Replaces an existing resource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>PATCH</simpara></entry>
<entry align="left" valign="top"><simpara>Updates/Modifies an existing resource.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>DELETE</simpara></entry>
<entry align="left" valign="top"><simpara>Deletes a resource.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_uri">
<title>URI</title>
<simpara>A Uniform Resource Identifier (URI) provides a simple and extensible means for identifying a resource as being a locator, a name, or both. The general rules of URIs are defined in [IETF RFC 3986].
The RESTful API to support moving feature data uses a Uniform Resource Locator (URL) for location and access of resources via the HTTP protocol. The basic components of URLs can be defined as follows:</simpara>
<informalexample>
<simpara><emphasis role="strong">URL = <emphasis>SERVICE_ROOT</emphasis> [ "/" <emphasis>RESOURCE_PATH</emphasis> [ "?" <emphasis>QUERY_OPTIONS</emphasis> ]]</emphasis></simpara>
</informalexample>
<itemizedlist>
<listitem>
<simpara><emphasis>SERVICE_ROOT</emphasis>: the identification of service endpoints for clients, usually formed as <literal>"http:""//"host[":"port]["/"version]</literal>. The "http" scheme is used to locate network resources via the HTTP
protocol. The host is a domain name of a network host, or its IPv4 address as a set of four decimal digit groups separated by ".". The version is a API version.</simpara>
</listitem>
<listitem>
<simpara><emphasis>RESOURCE_PATH</emphasis>: the representation of a particular resource. By attaching the resource path after the service root URI, clients can address to different types of resources. (sub-clause <xref linkend="resources"/>).</simpara>
</listitem>
<listitem>
<simpara><emphasis>QUERY_OPTIONS</emphasis>: clients can apply query options after the resource path to further process the addressed resources, such as sorting by properties or filtering with criteria (sub-clause <xref linkend="queries"/>).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_version">
<title>Version</title>
<simpara>The service implementation shall support a HTTP version. This document assumes the the protocol referred to as "HTTP/1.1" [IETF RFC 2616].</simpara>
</section>
<section xml:id="_status">
<title>Status</title>
<simpara>The response message should contain a status code of the attempt to understand and satisfy the request. Depending on the first digit of a 3-digit integer code, it is classified into five roles:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="84*"/>
<colspec colname="col_2" colwidth="337*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1xx</simpara></entry>
<entry align="left" valign="top"><simpara>Informational - Request received, continuing process</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2xx</simpara></entry>
<entry align="left" valign="top"><simpara>Success - The action was successfully received, understood, and accepted</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3xx</simpara></entry>
<entry align="left" valign="top"><simpara>Redirection - Further action must be taken in order to complete the request</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4xx</simpara></entry>
<entry align="left" valign="top"><simpara>Client Error - The request contains bad syntax or cannot be fulfilled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5xx</simpara></entry>
<entry align="left" valign="top"><simpara>Server Error - The server failed to fulfill an apparently valid request</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Full list of status codes are defined in [IETF RFC 2616], Section 10. This document suggests usages of the following specific codes:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">200 OK</emphasis> : General success status code.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">201 CREATED</emphasis>: Successful creation of resources for POST or PATCH.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">204 NO CONTENT</emphasis>: Successful operation for DELETE or PUT. There is nothing in the response body.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">400 BAD REQUEST</emphasis>: General error of client request, such as a wrong parameter, missing data, etc.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">404 NOT FOUND</emphasis>: The requested resource is not found.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">406 Not Acceptable</emphasis>: The media type given in the Content-Type header field is not <literal>"application/geo+json"</literal> or <literal>"application/geo+json-seq"</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">500 Internal Service Error</emphasis>: Unexpected condition during the request operations in a server side.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">501 Not Implemented</emphasis>: The server does not support the functionality required to fulfill the request.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_header">
<title>Header</title>
<simpara>A general HTTP request/response message contains header fields consisting of a name, followed by a colon (":") and the field value. Detail information of HTTP header fields are also described in [IETF RFC 2616], Section 4.5 (General Header Fields), Section 5.3 (Request Header Fields), Section 6.2 (Response Header Fields), and Section 7.1 (Entity Header Fields).
The RESTful API of moving features in this document concerns only the Content-Type field, and the other fields are charged to the implementation of domain applications.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Content-Type</emphasis>: All request/response message SHALL contain the Content-Type field to indicate the media type of the entity-body. The Content-Type field has one of media types of <literal>"application/geo+json"</literal> and <literal>"application/geo+json-seq"</literal> to interpret Moving Features JSON (MF-JSON) entities in the message body.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Transfer-Encoding</emphasis>: A web server serves content as a stream (dynamically-generated content) with the Transfer-Encoding field set by <literal>"chunked"</literal>. The size of each chuck is sent right before the chuck itself, the representation of content is recommended to use the JSON Text Sequence format [IETF RFC 7464] for the streaming transfer. Content transfer is terminated by a final chunk of length zero.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The Host request-header field specifies the Internet host and port number of the resource being requested. If the service_root omits the request, the client needs to include this field.</simpara>
</note>
</section>
<section xml:id="_body">
<title>Body</title>
<simpara>The entity-body (if any) sent with an request or response is in the JSON format. If the entities represent moving feature data, it is encoded by MF-JSON. More examples are given the next sub-clause.</simpara>
</section>
</section>
<section xml:id="resources" xreflabel="7.2">
<title>Resources</title>
<simpara>A request URI is constructed with a resource path for a corresponding resource item. Resources are the fundamental elements of the RESTful API. This API is designed by the resource classes and their relationships as shown in <xref linkend="resource_type"/>.</simpara>
<figure xml:id="resource_type" xreflabel="Figure 4">
<title>REST Resource Classes of a Moving Feature Service</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/restresources.png" contentwidth="90%" align="center"/>
</imageobject>
<textobject><phrase>REST Resources</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_resource_classes">
<title>Resource Classes</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">MovingFeature Class</emphasis>: It is for the root resource to enable the client to access other resources as its properties. A MovingFeature resource is <emphasis role="strong">mandatory</emphasis> to be implemented with the following properties in a moving-feature service:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="126*"/>
<colspec colname="col_4" colwidth="84*"/>
<colspec colname="col_5" colwidth="42*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>@id</simpara></entry>
<entry align="left" valign="top"><simpara>It is the unique and system-generated identifier. Clients cannot edit its value.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Any (Null is not allowed)</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>temporalGeometry</simpara></entry>
<entry align="left" valign="top"><simpara>A resource representing a temporal geometry.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Object&lt;TemporalGeometry&gt; (Null is not allowed)</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>temporalProperties</simpara></entry>
<entry align="left" valign="top"><simpara>A resource containing temporal properties.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;TemporalProperty&gt; or Null</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>properties</simpara></entry>
<entry align="left" valign="top"><simpara>A resource containing static properties as name-value pairs.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;Property&gt; or Null</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">TemporalGeometry Class</emphasis>: It is for accessing the temporal geometry of moving features. A TemporalGeometry resource is <emphasis role="strong">mandatory</emphasis> to be implemented with the following properties in a moving-feature service:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="126*"/>
<colspec colname="col_4" colwidth="84*"/>
<colspec colname="col_5" colwidth="42*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>type</simpara></entry>
<entry align="left" valign="top"><simpara>Its value is one of "MovingPoint", "MovingLineString", "MovingPolygon", "MultiMovingPoint", "MultiMovingLineString", "MultiMovingPolygon", and "MovingGeometryCollection".</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>coordinates</simpara></entry>
<entry align="left" valign="top"><simpara>A collection of geometries represented by lists of sampled positions.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;Geometry&gt; (or Null for collection types)</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one (mandatory for simple types)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>datetimes</simpara></entry>
<entry align="left" valign="top"><simpara>A collection of datetimes when the coordinates are sampled.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;DateTime&gt; (or Null for collection types)</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one (mandatory for simple types)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>members</simpara></entry>
<entry align="left" valign="top"><simpara>A navigation property to address temporal-geometry elements of the collection types such as "MultiMovingPoint", "MultiMovingLineString", "MultiMovingPolygon", and "MovingGeometryCollection".</simpara></entry>
<entry align="left" valign="top"><simpara>TemporalGeometry (or Null for simple types)</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-many</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>interpolations</simpara></entry>
<entry align="left" valign="top"><simpara>A navigation property to address the interpolation methods.</simpara></entry>
<entry align="left" valign="top"><simpara>Interpolation (or Null for collection types)</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-many (mandatory for simple types)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">TemporalProperty Class</emphasis>: It is for accessing the temporal properties of moving features. A TemporalProperty resource is optional to be implemented in a moving-feature service. The minimum properties for the implementation are defined by:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="126*"/>
<colspec colname="col_4" colwidth="84*"/>
<colspec colname="col_5" colwidth="42*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>name</simpara></entry>
<entry align="left" valign="top"><simpara>A name of dynamic attribute of feature.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES (but, no duplication within a moving feature.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>uom</simpara></entry>
<entry align="left" valign="top"><simpara>A symbol or URI to address the unit of measurement.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String or Null</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>values</simpara></entry>
<entry align="left" valign="top"><simpara>A collection of sampled values to represent dynamic changes of feature attribute.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;Number/String&gt;</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>datetimes</simpara></entry>
<entry align="left" valign="top"><simpara>A collection of datetimes when the values are sampled.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Array&lt;DateTime&gt;</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>interpolations</simpara></entry>
<entry align="left" valign="top"><simpara>A navigation property to address the interpolation methods.</simpara></entry>
<entry align="left" valign="top"><simpara>Interpolation</simpara></entry>
<entry align="left" valign="top"><simpara>One-to-many (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Interpolation Class</emphasis>: It is for accessing an interpolation method. An Interpolation resource is <emphasis role="strong">mandatory</emphasis> to be implemented with the following properties in a moving-feature service:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="126*"/>
<colspec colname="col_4" colwidth="84*"/>
<colspec colname="col_5" colwidth="42*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>@id</simpara></entry>
<entry align="left" valign="top"><simpara>It is the unique and system-generated identifier.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Any</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>@name</simpara></entry>
<entry align="left" valign="top"><simpara>A name of interpolation.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>formulas</simpara></entry>
<entry align="left" valign="top"><simpara>A collection of formulas to estimate arbitrary values at time.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Any</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-one</simpara></entry>
<entry align="left" valign="top"><simpara>NO</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>For pre-defined methods such as Discrete, Stepwise, and Linear, the client cannot edit the names of methods.
This practice assumes that the name of a user-defined interpolation formula is automatically assigned by the service when moving features are inserted.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Property Class</emphasis>: It is for accessing the static properties of moving features. A Property resource is optional to be implemented in a moving-feature service. The minimum properties for the implementation are defined by:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="126*"/>
<colspec colname="col_4" colwidth="84*"/>
<colspec colname="col_5" colwidth="42*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>name</simpara></entry>
<entry align="left" valign="top"><simpara>A name of feature attribute.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES (but, no duplication within a moving feature.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>value</simpara></entry>
<entry align="left" valign="top"><simpara>A value of feature attribute.</simpara></entry>
<entry align="left" valign="top"><simpara>JSON Any</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<simpara>JSON Any = False / Null / True / Object / Array / Number / String<?asciidoc-br?>
A resource instance whose type is specified, such as Geometry, DateTime, TemporalGeometry, TemporalProperty, Property, and so on, is a JSON Object.</simpara>
</note>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">FeatureLayer Class</emphasis>: It is for a collection of moving features to manage data in a distinct (physical or logical) space; however, it is an optional resource and can be replaced by an Application-dependent feature.
When the service considers the implementation, the following properties may be required:</simpara>
</listitem>
</itemizedlist>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="99%"?>
<?dbfo table-width="99%"?>
<?dblatex table-width="99%"?>
<tgroup cols="5">
<colspec colname="col_1" colwidth="42*"/>
<colspec colname="col_2" colwidth="126*"/>
<colspec colname="col_3" colwidth="84*"/>
<colspec colname="col_4" colwidth="42*"/>
<colspec colname="col_5" colwidth="126*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Data type</entry>
<entry align="left" valign="top">Multiplicity and use</entry>
<entry align="left" valign="top">Editable</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>name</simpara></entry>
<entry align="left" valign="top"><simpara>A property indicates the label of a FeatureLayer resource</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES (but, no duplication.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>description</simpara></entry>
<entry align="left" valign="top"><simpara>A property describes a short comment about the layer</simpara></entry>
<entry align="left" valign="top"><simpara>JSON String</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>updateFrequency</simpara></entry>
<entry align="left" valign="top"><simpara>A property provides the connectivity of movement within a time interval (second)</simpara></entry>
<entry align="left" valign="top"><simpara>Integer</simpara></entry>
<entry align="left" valign="top"><simpara>One (mandatory)</simpara></entry>
<entry align="left" valign="top"><simpara>YES (but, the previous data are not affected.)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>features</simpara></entry>
<entry align="left" valign="top"><simpara>A navigation property to address each moving feature</simpara></entry>
<entry align="left" valign="top"><simpara>MovingFeature</simpara></entry>
<entry align="left" valign="top"><simpara>Zero-to-many</simpara></entry>
<entry align="left" valign="top"><simpara>YES</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<simpara>The moving-feature service needs to manage the connectivity of features' movement by using the updateFrequency interval.</simpara>
</note>
</section>
<section xml:id="_resource_path_patterns">
<title>Resource Path Patterns</title>
<simpara>Each resource in the service has at least one URL.
The recommendation pattern of resource URL paths to address a collection of MovingFeature entities, a MovingFeature entity, and its properties will be formed as:</simpara>
<formalpara>
<title>URL patterns without a FeatureLayer resource</title>
<para>
<screen> - SERVICE_ROOT/MovingFeatures
 - SERVICE_ROOT/MovingFeatures(@id)
 - SERVICE_ROOT/MovingFeatures(@id)/temporalGeometry
 - SERVICE_ROOT/MovingFeatures(@id)/temporalProperties
 - SERVICE_ROOT/MovingFeatures(@id)/properties</screen>
</para>
</formalpara>
<note>
<simpara>@id is the identifier of moving feature; therefore, the server needs to return its identifier when a client inserts a new feature or provide a way to access each identifier.</simpara>
</note>
<simpara>If the server implements the FeatureLayer resource, it is recommend that the path pattern of resource be formed as:</simpara>
<formalpara>
<title>URL patterns with FeatureLayer resources</title>
<para>
<screen> - SERVICE_ROOT/FeatureLayers/
 - SERVICE_ROOT/FeatureLayers($NAME)/features
 - SERVICE_ROOT/FeatureLayers($NAME)/features(@id)
 - SERVICE_ROOT/FeatureLayers($NAME)/features(@id)/temporalGeometry
 - SERVICE_ROOT/FeatureLayers($NAME)/features(@id)/temporalProperties
 - SERVICE_ROOT/FeatureLayers($NAME)/features(@id)/properties</screen>
</para>
</formalpara>
<note>
<simpara> $NAME is replaced by a string of layer name.</simpara>
</note>
</section>
<section xml:id="_resource_path_examples">
<title>Resource Path Examples</title>
<simpara>A client can make a request against the resources via URL using various HTTP methods: POST, GET, PUT/PATCH, and DELTE.</simpara>
<pre class="http">
// <b>Example Request/Response: Insert a moving feature data into the service.</b>
// <i>.Request</i>
POST  SERVICE_ROOT/MovingFeatures   HTTP1.1
Content-Type: application/geo+json
{
     "type": "MovingFeature",
     "temporalGeometry": {
         "type": "MovingPoint", // a geometry type to represent a trajectory object
             "coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
             "datetimes": ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z", "2011-07-15T01:01:01Z"],
             "interpolations": "Linear", // an interpolation method
       },
      "temporalProperties": [  //(optional)
             { "name":"length",
                "uom": "http://www.qudt.org/qudt/owl/1.0.0/quantity/Length", // a URL denoting a unit-of-measure
                "values": [1.0, 2.4, 1.0],
                 "datetimes" : ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z"],
                 "interpolations": "Stepwise"
             }
      ]
}

// <i>.Response</i>
201 CREATED
{
    “@id”: “mf0001",
    “@created”: "2012-07-14T22:01:01" // Application-defined property
}
</pre>
<pre class="http">
// <b>Example Request/Response: Add new trajectory data into a stored moving feature.</b>
// <i>.Request</i>
POST  SERVICE_ROOT/MovingFeatures('mf0001')/temporalGeometry   HTTP1.1
Content-Type: application/geo+json
{
    "type": "MovingPoint", // a geometry type to represent a trajectory object
    "coordinates": [ [100.0, 0.0], [101.0, 0.0]],
    "datetimes": ["2011-07-16T02:01:01Z", "2011-07-16T06:01:01Z"],
    "interpolation": "Linear", // an interpolation method
}

// <i>.Response</i>
201 CREATED
{
    “@modified”: "2012-07-14T22:01:01" // Application-defined property
}
</pre>
<pre class="http">
// <b>Example Request/Response: Get the list of all the temporal property information.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalProperties   HTTP1.1

// <i>.Response</i>
200 OK
[{
     "name":"length",
     "uom": "http://www.qudt.org/qudt/owl/1.0.0/quantity/Length", // a URL denoting a unit-of-measure
     "values": [1.0, 2.4, 1.0],
     "datetimes" : ["2011-07-14T22:01:01Z", "2011-07-14T23:01:01Z", "2011-07-15T00:01:01Z"],
     "interpolations": "Stepwise"
}]
</pre>
<pre class="http">
// <b>Example Request/Response: Retrieve a temporal property information whose name(key) is 'dose'.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalProperties('dose')   HTTP1.1

// <i>.Response</i>
200 OK
{
     "name":"dose",
     "uom": "http://www.qudt.org/qudt/owl/1.0.0/quantity/AbsorbedDose", // a URL denoting a unit-of-measure
     "values": [0.003, 0.003],
     "datetimes" : ["2011-07-14T22:32:00Z", "2011-07-15T10:15:00Z"],
     "interpolations": "Discrete"
}
</pre>
<pre class="http">
// <b>Example Request/Response: Modify the name of a property.</b>
// <i>.Request</i>
PUT  SERVICE_ROOT/MovingFeatures('mf0001')/properties#name='title'   HTTP1.1

// <i>.Response</i>
204 NO CONTENT
</pre>
</section>
</section>
<section xml:id="queries" xreflabel="7.3">
<title>Access Interfaces</title>
<simpara>The OGC Moving Feature Access [OGC 16-120r1] document requires three types of operations for accessing moving feature data: Type A, Type B, and Type C as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>Type A: Retrieval of feature attribute<?asciidoc-br?>
For example, these operations retrieve positions, trajectories, and velocities of a moving feature such as a car, a person, a vessel, an aircraft, and a hurricane.</simpara>
</listitem>
<listitem>
<simpara>Type B: Operations between one trajectory object and one or more geometry objects<?asciidoc-br?>
An example of these operations is “intersection” between a geometry object and a trajectory of a moving feature like a car, a person, a vessel, an aircraft, and a hurricane.</simpara>
</listitem>
<listitem>
<simpara>Type C: Operations between two trajectory objects<?asciidoc-br?>
An example of these operations is to calculate a distance of the nearest approach of a trajectory to another trajectory. The case studies are distance between a criminal agent and a police agent for predicting crime patterns or distance between soccer players for making proper tactics.</simpara>
</listitem>
</itemizedlist>
<simpara>OGC Moving Feature Access provides the implementation specification as a common design to support moving feature data into a database, data service, or an application using various programming languages or protocols (e.g., SQL, Java, and HTTP).
This sub-clause exemplifies how to realize those operations using RESTful API based on a resource URL, followed by the query option parts.
The client is able to retrieve a resource representation using a HTTP GET request.</simpara>
<informalexample>
<simpara>"GET"  <emphasis>SERVICE_ROOT</emphasis> "/" <emphasis>RESOURCE_PATH</emphasis> "?" <emphasis>QUERY_OPTIONS</emphasis>  "HTTP/1.1"</simpara>
</informalexample>
<simpara>This document basically follows the usage of query options ($filter, $count, $orderby, $skip, $top, $select, and $search) to be considered in OGC SensorThings API standard [OGC 15-078r6].
The OGC SensorThings API shows a good example of adaptation in OData protocols [OData-Part1] and extension of geospatial query functions.
This practice employs the <literal>$select</literal>, <literal>$filter</literal>, and <literal>$search</literal> options in moving feature operations.
In order to make a simple rule of the query options, the abstract operations of moving features as identified in [OGC 16-120r1] are re-categorized into three interfaces as shown in <xref linkend="interfaces"/>: <emphasis role="strong">Harvest</emphasis>, <emphasis role="strong">Relation</emphasis>, and <emphasis role="strong">Analysis</emphasis>.
Interface <emphasis role="strong">GeoSpatial</emphasis> and <emphasis role="strong">Temporal</emphasis> are additionally defined to access derived properties from a TemporalGeometry and TemporalProperty resource.</simpara>
<warning>
<simpara>The figure omits the information of parameters and return types of Type A, B, and C operations not to bring misunderstanding the OGC Moving Feature Access specification and ambiguous type definition. The detail specification of each operation in Type A, B, and C (gray color boxes) is described by the OGC Moving Feature Access.
The other interfaces (yellow color boxes) are not related to the OGC Moving Feature Access specification.</simpara>
</warning>
<figure xml:id="interfaces" xreflabel="Figure 5">
<title>Interface Types of RESTful API</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/restinterfaces.png" contentwidth="100%" align="center"/>
</imageobject>
<textobject><phrase>Moving Feature Interfaces</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Harvest Interface</emphasis>: This interface mostly implements the Type A operations to retrieve feature attributes. The practice uses <literal>geometryAtTime</literal> and <literal>timeAtGeometry</literal> to extend the geometry types not only 0-dimensional geometry objects but also 1- and 2-dimensional geometry objects instead of <emphasis>pointAtTime</emphasis> and <emphasis>timeAtPoint</emphasis> in the specification.
In addition, operation <literal>stBoundedBy</literal> is added to return the boundary object containing moving features in a spatiotemporal domain.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Relation Interface</emphasis>: This interface implements the topological relationship operations in Type B (between trajectory and geometry objects) and Type C (between two trajectory objects), such as <emphasis>disjoint</emphasis> and <emphasis>intersects</emphasis>. The practice changes the name of <emphasis>distanceWithin</emphasis> to <literal>within</literal> to exclude the distance parameter. Moreover, new relations of <literal>enters</literal>, <literal>leaves</literal>, and <literal>passes</literal> are defined to clarify its temporal order of topological changes of relation from <emphasis>intersects</emphasis>.<?asciidoc-br?>
<xref linkend="relations"/> shows the examples of each relation.<?asciidoc-br?></simpara>
</listitem>
</itemizedlist>
<figure xml:id="relations" xreflabel="Figure 6">
<title>Specialized Relations of Moving Features from <emphasis>intersects</emphasis> (<inlineequation><alt><![CDATA[t_i < t_j < t_k]]></alt><mathphrase><![CDATA[t_i < t_j < t_k]]></mathphrase></inlineequation> for time instant <inlineequation><alt><![CDATA[t_i, t_j, t_k]]></alt><mathphrase><![CDATA[t_i, t_j, t_k]]></mathphrase></inlineequation>)</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mfrelations.png" contentwidth="50%" align="center"/>
</imageobject>
<textobject><phrase>Moving Feature Relations</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Analysis Interface</emphasis>: This interface implements the analysis operations in Type B (between trajectory and geometry objects) and Type C (between two trajectory objects), such as <emphasis>nearestApproach</emphasis> and <emphasis>difference</emphasis>. The operations return a new object as a computation result. For example, operation "nearestApproach" with geometric object calculates the distance between a trajectory and the geometry or between two trajectories, and returns a distance in time. This practice additionally defines two more operations: <literal>buffer</literal> and <literal>convoy</literal>.
The <literal>buffer</literal> operation returns a temporal geometry (simple or collection) covering all points within a given distance from a target temporal geometry. The <literal>convoy</literal> operation returns a temporal geometry (simple or collection) covering a group of moving features such that these features are consecutively closed each other during a given time period.
<xref linkend="analysis"/> shows the result examples of <literal>buffer</literal> and <literal>convoy</literal> operations.<?asciidoc-br?></simpara>
</listitem>
</itemizedlist>
<figure xml:id="analysis" xreflabel="Figure 7">
<title>Examples of Analysis Operations</title>
<mediaobject>
<imageobject>
<imagedata fileref="./images/mfanalysis.png" contentwidth="60%" align="center"/>
</imageobject>
<textobject><phrase>Moving Feature Analysis</phrase></textobject>
</mediaobject>
</figure>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">GeoSpatial Interface</emphasis>: This interface provides function <literal>dimension</literal> that returns the maximum dimension of leaf geometry objects and <literal>boundary</literal> that returns the closure of the combinatorial geospatial boundary of all leaves (a foliation) for a temporal geometry resource.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Temporal Interface</emphasis>: This interface provides function <literal>snapshot</literal> and <literal>slice</literal> that returns a sub-object of a temporal geometry/property at a given time instant and time period, respectively. The <literal>boundedBy</literal> function returns the temporal range covering its prism.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_query_option_literal_select_literal">
<title>Query Option <literal>$select</literal></title>
<simpara>The <literal>$select</literal> query option requests the service to harvest the properties or return a value derived from properties. The operations of Harvest, GeoSpatial, Temporal will be realized with the <literal>$select</literal> query option corresponding to a MovingFeature or FeatureLayer resource.</simpara>
<pre class="http">
// <b>Example Request/Response: geometryAtTime of a moving feature with ID.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$select=geometryAtTime(2008-02-04T00:00:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "pointAtTime" : {
        "type" : "POINT",
        "coordinates" : [ 116.35072, 39.96354 ]
    }
}
</pre>
<pre class="http">
// <b>Example Request/Response: geometryAtTime of all moving features.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$select=geometryAtTime(2008-02-04T00:00:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
[
    {
        "@id" : "mf0001",
        "pointAtTime" : {
            "type" : "POINT",
            "coordinates" : [ 116.35072, 39.96354 ]
        }
    },
    {
        "@id" : "mf0002",
        "pointAtTime" : {
            "type" : "POINT",
            "coordinates" : [ 116.01843751281389, 39.909385232047136 ]
        }
    }
]
</pre>
<pre class="http">
// <b>Example Request/Response: timeAtGeometry of a moving feature with ID.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$select=timeAtGeometry(POINT(116.4%2039.8))  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
　　　　"timeAtPoint" : [ "2008-02-07T13:00:37Z", "2008-02-07T13:00:51Z", "2008-02-08T13:35:57Z", "2008-02-08T13:36:06Z", "2008-02-06T13:08:32Z", "2008-02-06T13:08:29Z", "2008-02-07T23:04:51Z", "2008-02-07T23:04:55Z", "2008-02-06T23:09:41Z", "2008-02-06T23:09:56Z", "2008-02-04T00:36:14Z", "2008-02-04T00:36:23Z", "2008-02-05T13:17:28Z", "2008-02-05T13:17:39Z" ]
}
</pre>
<pre class="http">
// <b>Example Request/Response: timeAtGeometry of all moving features.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$select=timeAtGeometry(POINT(116.4%2039.8))  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
[
    {
        "@id" : "mf0001",
        "timeAtPoint" : [ "2008-02-07T13:00:37Z", "2008-02-07T13:00:51Z", "2008-02-08T13:35:57Z", "2008-02-08T13:36:06Z", "2008-02-06T13:08:32Z", "2008-02-06T13:08:29Z", "2008-02-07T23:04:51Z", "2008-02-07T23:04:55Z", "2008-02-06T23:09:41Z", "2008-02-06T23:09:56Z", "2008-02-04T00:36:14Z", "2008-02-04T00:36:23Z", "2008-02-05T13:17:28Z", "2008-02-05T13:17:39Z" ]
    },
    {
        “@id”: “mf0002",
        "timeAtPoint": ["2013-05-01T10:33:45Z"]
    }
]
</pre>
<pre class="http">
// <b>Example Request/Response: velocity of the all moving feature.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$select=velocity(2008-02-04T00:00:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
[
    {
        "@id" : "mf0001",
        "velocity" : [ 0.0, 0.0 ]
    },
    {
        "@id" : "mf0002",
        "velocity" : [ -5.42125853725347E-4, 1.0906301588750913E-4 ]
    }
]
</pre>
<pre class="http">
// <b>Example Request/Response: timeAtCummulativeDistance of a moving feature with ID.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$select=timeAtCummulativeDistance(1,%22km%22)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "timeAtCummulativeDistance" : "2008-02-02T22:35:04Z"
}
</pre>
<pre class="http">
// <b>Example Request/Response: subTrajectory of a moving feature with ID.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$select=subTrajectory(2008-02-03T23:00:00Z,2008-02-03T23:05:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "subTrajectory" : {
        "type" : "MovingPoint",
        "datetimes" : [ "2008-02-03T23:00:00Z", "2008-02-03T23:04:34Z", "2008-02-03T23:03:49Z", "2008-02-03T23:03:04Z", "2008-02-03T23:02:19Z", "2008-02-03T23:01:29Z", "2008-02-03T23:00:44Z", "2008-02-03T23:00:04Z", "2008-02-03T23:04:39Z", "2008-02-03T23:03:54Z", "2008-02-03T23:03:09Z", "2008-02-03T23:02:24Z", "2008-02-03T23:01:34Z", "2008-02-03T23:00:49Z", "2008-02-03T23:00:09Z", "2008-02-03T23:04:44Z", "2008-02-03T23:03:59Z", "2008-02-03T23:03:14Z", "2008-02-03T23:02:29Z", "2008-02-03T23:01:39Z", "2008-02-03T23:00:54Z", "2008-02-03T23:00:14Z", "2008-02-03T23:04:49Z", "2008-02-03T23:04:04Z", "2008-02-03T23:03:19Z", "2008-02-03T23:02:34Z", "2008-02-03T23:01:49Z", "2008-02-03T23:00:59Z", "2008-02-03T23:00:19Z", "2008-02-03T23:04:56Z", "2008-02-03T23:04:09Z", "2008-02-03T23:03:24Z", "2008-02-03T23:02:39Z", "2008-02-03T23:01:54Z", "2008-02-03T23:01:04Z", "2008-02-03T23:00:24Z", "2008-02-03T23:04:14Z", "2008-02-03T23:03:29Z", "2008-02-03T23:02:49Z", "2008-02-03T23:01:59Z", "2008-02-03T23:01:09Z", "2008-02-03T23:00:29Z", "2008-02-03T23:04:19Z", "2008-02-03T23:03:34Z", "2008-02-03T23:02:54Z", "2008-02-03T23:02:04Z", "2008-02-03T23:01:19Z", "2008-02-03T23:00:34Z", "2008-02-03T23:04:29Z", "2008-02-03T23:03:44Z", "2008-02-03T23:02:59Z", "2008-02-03T23:02:09Z", "2008-02-03T23:01:24Z", "2008-02-03T23:00:39Z", "2008-02-03T23:05:00Z" ],
        "coordinates" : [ [ 116.35079, 39.96372 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96422 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96372 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96422 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96421 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35107, 39.96425 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35106, 39.96425 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35105, 39.96424 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35104, 39.96424 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35104, 39.96423 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ] ],
        "interpolations" : "Linear"
    }
}
</pre>
<simpara>The subTrajectory operation can also be realized by using the slice interface of temporal geometry as follows:</simpara>
<pre class="http">
// <b>Example Request/Response: slice of the temporal geometry of the moving feature whose identifier is 'mf0001'.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalGeometry?$select=slice(2008-02-03T23:00:00Z,2008-02-03T23:05:00Z)   HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "slice": {
        "type" : "MovingPoint",
        "datetimes" : [ "2008-02-03T23:00:00Z", "2008-02-03T23:04:34Z", "2008-02-03T23:03:49Z", "2008-02-03T23:03:04Z", "2008-02-03T23:02:19Z", "2008-02-03T23:01:29Z", "2008-02-03T23:00:44Z", "2008-02-03T23:00:04Z", "2008-02-03T23:04:39Z", "2008-02-03T23:03:54Z", "2008-02-03T23:03:09Z", "2008-02-03T23:02:24Z", "2008-02-03T23:01:34Z", "2008-02-03T23:00:49Z", "2008-02-03T23:00:09Z", "2008-02-03T23:04:44Z", "2008-02-03T23:03:59Z", "2008-02-03T23:03:14Z", "2008-02-03T23:02:29Z", "2008-02-03T23:01:39Z", "2008-02-03T23:00:54Z", "2008-02-03T23:00:14Z", "2008-02-03T23:04:49Z", "2008-02-03T23:04:04Z", "2008-02-03T23:03:19Z", "2008-02-03T23:02:34Z", "2008-02-03T23:01:49Z", "2008-02-03T23:00:59Z", "2008-02-03T23:00:19Z", "2008-02-03T23:04:56Z", "2008-02-03T23:04:09Z", "2008-02-03T23:03:24Z", "2008-02-03T23:02:39Z", "2008-02-03T23:01:54Z", "2008-02-03T23:01:04Z", "2008-02-03T23:00:24Z", "2008-02-03T23:04:14Z", "2008-02-03T23:03:29Z", "2008-02-03T23:02:49Z", "2008-02-03T23:01:59Z", "2008-02-03T23:01:09Z", "2008-02-03T23:00:29Z", "2008-02-03T23:04:19Z", "2008-02-03T23:03:34Z", "2008-02-03T23:02:54Z", "2008-02-03T23:02:04Z", "2008-02-03T23:01:19Z", "2008-02-03T23:00:34Z", "2008-02-03T23:04:29Z", "2008-02-03T23:03:44Z", "2008-02-03T23:02:59Z", "2008-02-03T23:02:09Z", "2008-02-03T23:01:24Z", "2008-02-03T23:00:39Z", "2008-02-03T23:05:00Z" ],
        "coordinates" : [ [ 116.35079, 39.96372 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96422 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96372 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96422 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35102, 39.96421 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35107, 39.96425 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35106, 39.96425 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35105, 39.96424 ], [ 116.35079, 39.96373 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35104, 39.96424 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35076, 39.96383 ], [ 116.35104, 39.96423 ], [ 116.35079, 39.96374 ], [ 116.35079, 39.96373 ], [ 116.35076, 39.96383 ] ],
        "interpolations" : "Linear"
    }
}
</pre>
<simpara>However, the slice operation is for only one MovingFeature resource. This practice restricts the use of GeoSpatial and Temporal interface to only TemporalGeometry or/and TemporalProperty resource type.
The following examples show the use cases of each operation.</simpara>
<pre class="http">
// <b>Example Request/Response: snapshot of the temporal property whose name is 'length' of the moving feature whose identifier is 'mf0001'. </b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalProperties(name=@title)?$select=snapshot(2013-05-01T10:33:41Z)&#169;@title='length'   HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "snapshot": {
        "name": "length",
        "uom": "http://www.qudt.org/qudt/owl/1.0.0/quantity/Length", // a URL denoting a unit-of-measure
        "values": [1.2],
        "datetimes": ["2013-05-01T10:33:41Z"],
        "interpolations": "Discrete"
    }
}
</pre>
<pre class="http">
// <b>Example Request/Response: boundedBy of the temporal geometry of the moving feature whose identifier is 'mf0001'.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalGeometry?$select=boundedBy()   HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "boundedBy": {
        "begin" : "2008-02-03T23:00:00Z",
        "end" : "2008-02-03T23:05:00Z"
    }
}
</pre>
<pre class="http">
// <b>Example Request/Response: boundary of the temporal geometry of the moving feature whose identifier is 'mf0001'.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')/temporalGeometry?$select=boundary()   HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "boundary": {
       "type": "LineString",
       "coordinates": [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ]
    }
}
</pre>
</section>
<section xml:id="_query_option_literal_filter_literal">
<title>Query Option <literal>$filter</literal></title>
<simpara>The <literal>$filter</literal> query option allows clients to filter a collection of moving features that are addressed by a request URL. It can be applied to a specific moving feature and a collection of moving features. The <literal>$filter</literal> option is evaluated for each moving features in the collection, and returns the features where the expression of the Relation interface is <literal>true</literal> in the response. For a specific feature, it returns <literal>true</literal> or <literal>false</literal>. The Relation interface will be realized with the <literal>$filter</literal> query option.</simpara>
<pre class="http">
// <b>Example Request/Response: disjoint returns true or false corresponding to a moving feature.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$filter=disjoint(LINESTRING(1%202,3%204,5%206),2008-02-02T22:31:00Z,2008-02-02T22:40:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "disjoint": true
}
</pre>
<pre class="http">
// <b>Example Request/Response: intersects  returns the identifiers of moving features whose trajectory intersects with the parameter geometry object for a particular period of time in the collection.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$filter=intersects(POLYGON((30%2010%2C40%2040%2C20%2040%2C10%2020%2C30%2010)),2013-05-01T10:33:50Z,2013-05-01T10:36:41Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "intersects": [ "mf0001", "mf0003"]
}
</pre>
<pre class="http">
// <b>Example Request/Response: DistanceWithin returns the identifiers of moving features which are located within 100km from the given position during the parameter time period.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$filter=distanceWithin(POINT(103%201.0),2013-05-01T10:33:50Z,2013-05-01T10:36:41Z,100;km) HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
    "distanceWithin ": null
}
</pre>
<note>
<simpara>The operations of Type C between two trajectory objects provide spatiotemporal relations (e.g., intersects); however, the current API excludes them from the implementation interfaces until the expression way for parameter moving features becomes clear in a request URL, such as the Well-Known Text (WKT) format for a geometry object.</simpara>
</note>
</section>
<section xml:id="_query_option_literal_search_literal">
<title>Query Option <literal>$search</literal></title>
<simpara>The <literal>$search</literal> query option allows clients to analyze moving features or a specific moving feature, and returns a new object as a computation result. The Analysis interface will be realized with the <literal>$search</literal> query option.</simpara>
<pre class="http">
// <b>Example Request/Response: search the nearest approach point with ID.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures('mf0001')?$search=nearestApproachPoint(LINESTRING(116.35%2039.8,116.36%2040),2008-02-04T00:00:00Z,2008-02-04T00:10:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
{
      "nearestApproachPoint" : {
          "type" : "MovingPoint",
          "datetimes" : [ "2008-02-04T00:06:14Z", "2008-02-04T00:06:19Z" ],
          "coordinates" : [ [ 116.35089, 39.96329 ], [ 116.35814635910225, 39.962927182044886 ] ],
          "interpolations" : "Linear"
      }
}
</pre>
<pre class="http">
// <b>Example Request/Response: search the nearest approach distance for all moving features</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$search=nearestApproach(LINESTRING(116.35%2039.8,116.36%2040),2008-02-04T00:00:00Z,2008-02-04T00:10:00Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
[
     {
         "@id" : "mf0001",
         "nearestApproach" : {
             "name" : "distance",
             "uom" : "m",
             "values" : [ 0.007265423889165578, 0.007265423889165578 ],
             "datetimes" : [ "2008-02-04T00:06:14Z", "2008-02-04T00:06:19Z" ],
             "interpolations" : "Linear"
         }
     }
 ]
</pre>
<pre class="http">
// <b>Example Request/Response: Intersection returns a temporal geometry that intersects with the parameter geometry object for a particular period of time from the collection.</b>
// <i>.Request</i>
GET  SERVICE_ROOT/MovingFeatures?$search=intersection(POLYGON((30%2010%2C40%2040%2C20%2040%2C10%2020%2C30%2010)),2013-05-01T10:33:50Z,2013-05-01T10:36:41Z)  HTTP1.1

// <i>.Response</i>
200 OK
Content_Type: application/geo+json
[
    {
        "@id": "mf001",
        "intersection": {
            "type": "MovingPoint,
            "coordinates": [...],
            "datetimes" : [...],
            "interpolations": ...
        }
    },
    {
        "@id": "mf003",
        "intersection": {
            ...
        }
    }
]

</pre>
<note>
<simpara>In the OData protocol, the <literal>$search</literal> query option is used to restrict the result to include only those entities matching the specified search expression.<?asciidoc-br?>
For example,</simpara>
<itemizedlist>
<listitem>
<simpara><u>http://host/service/Products?$search=bike</u> //return all Products that match the search term "bike"</simpara>
</listitem>
<listitem>
<simpara><u>http://host/service/Products?$search=(mountain OR bike) AND NOT clothing</u> //return all Products that match either "mountain" or "bike" and do not match clothing</simpara>
</listitem>
</itemizedlist>
</note>
</section>
</section>
</section>
<section xml:id="_bibliography">
<title>Bibliography</title>
<bibliodiv>
<bibliomixed>
<bibliomisc><anchor xml:id="1" xreflabel="[1]"/>[1] Unified Code for Units of Measure (UCUM), unitsofmeasure.org</bibliomisc>
</bibliomixed>
<bibliomixed>
<bibliomisc><anchor xml:id="2" xreflabel="[2]"/>[2] EPSG Geodetic Parameter Dataset, www.epsg.org</bibliomisc>
</bibliomixed>
<bibliomixed>
<bibliomisc><anchor xml:id="3" xreflabel="[3]"/>[3] The GeoJSON Format Specification. 2008, geojson.org</bibliomisc>
</bibliomixed>
</bibliodiv>
</section>
<appendix xml:id="_revision_history">
<title>Revision History</title>
<informaltable xml:id="revision_history" xreflabel="Table 1" frame="all" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="18.1818*"/>
<colspec colname="col_2" colwidth="9.0909*"/>
<colspec colname="col_3" colwidth="36.3636*"/>
<colspec colname="col_4" colwidth="27.2727*"/>
<colspec colname="col_5" colwidth="9.091*"/>
<thead>
<row>
<entry align="left" valign="top">Date</entry>
<entry align="left" valign="top">Release</entry>
<entry align="left" valign="top">Author</entry>
<entry align="left" valign="top">Paragraph modified</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>2016-08-29</simpara></entry>
<entry align="left" valign="top"><simpara>r1</simpara></entry>
<entry align="left" valign="top"><simpara>Kyoung-Sook KIM, Hirotaka OGAWA</simpara></entry>
<entry align="left" valign="top"><simpara>All</simpara></entry>
<entry align="left" valign="top"><simpara>Created</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2016-09-27</simpara></entry>
<entry align="left" valign="top"><simpara>r2</simpara></entry>
<entry align="left" valign="top"><simpara>Kyoung-Sook KIM</simpara></entry>
<entry align="left" valign="top"><simpara>RESTful APIs: Resource types and interfaces</simpara></entry>
<entry align="left" valign="top"><simpara>Revised</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</appendix>
</title>
</book>
